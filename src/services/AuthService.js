import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import dotenv from 'dotenv';
import UsuarioRepository from '../repositories/usuarioRepository.js';
import CustomError from '../utils/helpers/CustomError.js';
import TokenUtil from '../utils/TokenUtil.js';
import EmailService from './EmailService.js';

dotenv.config();

export class AuthService {
    constructor() {
        this.usuarioRepository = new UsuarioRepository();
        this.tokenUtil = TokenUtil;
        this.ACCESS_TOKEN_SECRET = process.env.JWT_SECRET || "your_jwt_secret";
        this.REFRESH_TOKEN_SECRET = process.env.JWT_REFRESH_SECRET || "your_jwt_refresh_secret";
        this.ACCESS_TOKEN_EXPIRY = '1h';
        this.REFRESH_TOKEN_EXPIRY = '7d';
    }

    async autenticar(matricula, senha) {
        console.log('游댌 [AuthService] Iniciando autentica칞칚o para matr칤cula:', matricula);
        const usuario = await this.usuarioRepository.buscarPorMatricula(matricula, '+senha +senha_definida');
        console.log('游댌 [AuthService] Usu치rio encontrado com ID:', usuario?._id?.toString());

        if (!usuario) {
            throw new CustomError({
                statusCode: 401,
                errorType: 'authError',
                customMessage: 'Matr칤cula ou senha incorretos'
            });
        }

        if (!usuario.ativo) {
            throw new CustomError({
                statusCode: 401,
                errorType: 'authError',
                customMessage: 'Usu치rio inativo'
            });
        }

        // Verificar se a senha foi definida
        if (!usuario.senha_definida || !usuario.senha) {
            throw new CustomError({
                statusCode: 401,
                errorType: 'authError',
                customMessage: 'Usu치rio ainda n칚o definiu sua senha. Use o c칩digo de seguran칞a fornecido para definir sua senha.'
            });
        }

        // Verificar senha
        const senhaCorreta = await bcrypt.compare(senha, usuario.senha);
        if (!senhaCorreta) {
            throw new CustomError({
                statusCode: 401,
                errorType: 'authError',
                customMessage: 'Matr칤cula ou senha incorretos'
            });
        }

        // Gerar tokens
        console.log('游댌 [AuthService] Gerando tokens para usu치rio ID:', usuario._id?.toString());
        const accessToken = this._gerarAccessToken(usuario);
        const refreshToken = this._gerarRefreshToken(usuario);
        console.log('游댌 [AuthService] Token gerado:', accessToken.substring(0, 50) + '...');

        // Armazenar tokens no usu치rio e marcar como online
        await this.usuarioRepository.armazenarTokens(usuario._id, accessToken, refreshToken);
        await this.usuarioRepository.setUserOnlineStatus(usuario._id, true);

        // Retornar dados sem a senha
        const usuarioSemSenha = {
            id: usuario._id,
            nome_usuario: usuario.nome_usuario,
            email: usuario.email,
            matricula: usuario.matricula,
            perfil: usuario.perfil
        };

        return {
            usuario: usuarioSemSenha,
            accessToken,
            refreshToken
        };
    }

    async logout(userId) {
        // Marcar usu치rio como offline
        await this.usuarioRepository.setUserOnlineStatus(userId, false);
        return await this.usuarioRepository.removeToken(userId);
    }

    async refreshToken(refreshToken) {
        try {
            // Verificar se o token 칠 v치lido
            const decoded = jwt.verify(refreshToken, this.REFRESH_TOKEN_SECRET);

            // Buscar usu치rio pelo ID
            const usuario = await this.usuarioRepository.buscarPorId(decoded.id);

            if (!usuario || usuario.refreshtoken !== refreshToken) {
                throw new CustomError({
                    statusCode: 401,
                    errorType: 'authError',
                    customMessage: 'Token de atualiza칞칚o inv치lido'
                });
            }

            // Gerar novos tokens
            const accessToken = this._gerarAccessToken(usuario);
            const newRefreshToken = this._gerarRefreshToken(usuario);

            // Armazenar novos tokens
            await this.usuarioRepository.armazenarTokens(usuario._id, accessToken, newRefreshToken);

            return {
                accessToken,
                refreshToken: newRefreshToken
            };
        } catch (error) {
            throw new CustomError({
                statusCode: 401,
                errorType: 'authError',
                customMessage: 'Token de atualiza칞칚o inv치lido ou expirado'
            });
        }
    }

    _gerarAccessToken(usuario) {
        return jwt.sign(
            {
                id: usuario._id,
                matricula: usuario.matricula,
                perfil: usuario.perfil
            },
            this.ACCESS_TOKEN_SECRET,
            { expiresIn: this.ACCESS_TOKEN_EXPIRY }
        );
    }

    _gerarRefreshToken(usuario) {
        return jwt.sign(
            { id: usuario._id },
            this.REFRESH_TOKEN_SECRET,
            { expiresIn: this.REFRESH_TOKEN_EXPIRY }
        );
    }

    async revoke(matricula) {
        // Verificar se a matr칤cula foi fornecida
        if (!matricula) {
            throw new CustomError({
                statusCode: 400,
                errorType: 'validationError',
                customMessage: 'Matr칤cula n칚o fornecida'
            });
        }

        // Buscar usu치rio pela matr칤cula
        const usuario = await this.usuarioRepository.buscarPorMatricula(matricula);

        if (!usuario) {
            throw new CustomError({
                statusCode: 404,
                errorType: 'notFoundError',
                customMessage: 'Usu치rio n칚o encontrado com esta matr칤cula'
            });
        }

        // Remove tokens do usu치rio e marca como offline
        await this.usuarioRepository.setUserOnlineStatus(usuario._id, false);
        const data = await this.usuarioRepository.removeToken(usuario._id);
        return { data };
    }

    async recuperarSenha(email) {
        // Buscar o usu치rio pelo email
        const usuario = await this.usuarioRepository.buscarPorEmail(email);

        // Mesmo que n칚o encontre o usu치rio, n칚o revelamos isso por seguran칞a
        if (!usuario) {
            return {
                message: 'Solicita칞칚o de recupera칞칚o de senha recebida, um email ser치 enviado com as instru칞칫es para recupera칞칚o de senha'
            };
        }

        // Gerar token de recupera칞칚o (JWT)
        const token = await this.tokenUtil.generatePasswordRecoveryToken(usuario._id);

        // Gerar c칩digo de recupera칞칚o (4 d칤gitos)
        const codigo = Math.random().toString(36).replace(/[^a-z0-9]/gi, '').slice(0, 4).toUpperCase();

        // Salvar token e c칩digo no usu치rio
        await this.usuarioRepository.atualizarTokenRecuperacao(usuario._id, token, codigo);

        // Tentar enviar email de recupera칞칚o
        await EmailService.enviarCodigoRecuperacao(usuario, codigo);

        return {
            message: 'Solicita칞칚o de recupera칞칚o de senha recebida, um email ser치 enviado com as instru칞칫es para recupera칞칚o de senha'
        };
    }

    async redefinirSenhaComToken(token, novaSenha) {
        try {
            // Decodificar o token para obter o ID do usu치rio
            const usuarioId = await this.tokenUtil.decodePasswordRecoveryToken(token);

            // Verificar se o usu치rio existe
            const usuario = await this.usuarioRepository.buscarPorId(usuarioId);
            if (!usuario) {
                throw new CustomError({
                    statusCode: 404,
                    errorType: 'notFound',
                    customMessage: 'Usu치rio n칚o encontrado'
                });
            }

            // Hash da nova senha
            const senhaCriptografada = await bcrypt.hash(novaSenha, 10);

            // Atualizar senha e remover tokens de recupera칞칚o
            await this.usuarioRepository.atualizarSenha(usuarioId, senhaCriptografada);

            return {
                message: 'Senha atualizada com sucesso'
            };
        } catch (error) {
            throw new CustomError({
                statusCode: 401,
                errorType: 'authError',
                customMessage: 'Token inv치lido ou expirado'
            });
        }
    }

    async redefinirSenhaComCodigo(codigo, novaSenha) {
        // Buscar usu치rio pelo c칩digo de recupera칞칚o
        const usuario = await this.usuarioRepository.buscarPorCodigoRecuperacao(codigo);

        if (!usuario) {
            throw new CustomError({
                statusCode: 404,
                errorType: 'notFound',
                customMessage: 'C칩digo de recupera칞칚o inv치lido'
            });
        }

        // Verificar se o c칩digo n칚o expirou
        const agora = new Date();
        if (usuario.data_expiracao_codigo && usuario.data_expiracao_codigo < agora) {
            throw new CustomError({
                statusCode: 401,
                errorType: 'authError',
                customMessage: 'C칩digo de recupera칞칚o expirado'
            });
        }

        // Hash da nova senha
        const senhaCriptografada = await bcrypt.hash(novaSenha, 10);

        // Atualizar senha, ativar usu치rio e remover informa칞칫es de recupera칞칚o
        await this.usuarioRepository.atualizarSenhaCompleta(usuario._id, {
            senha: senhaCriptografada,
            senha_definida: true,
            ativo: true,
            codigo_recuperacao: null,
            data_expiracao_codigo: null,
            token_recuperacao: null,
            token_recuperacao_expira: null
        });

        // Verificar se 칠 primeira defini칞칚o de senha
        const isPrimeiraDefinicao = !usuario.senha_definida;

        return {
            message: isPrimeiraDefinicao ? 
                'Senha definida com sucesso! Sua conta est치 ativa e voc칡 j치 pode fazer login.' : 
                'Senha atualizada com sucesso'
        };
    }
}
