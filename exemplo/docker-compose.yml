version: '3'
services:
  api-meals:
    restart: always
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: api-meals
    working_dir: /usr/src/app
    command: "npm start"
    expose:
      - "5011"
    ports:
      - "5011:5011"
    environment:
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_SERVICE_NAME=api-meals
  #   depends_on:
  #     - jaeger

  # jaeger:
  #   restart: always
  #   image: jaegertracing/all-in-one:1.49
  #   container_name: jaeger
  #   ports:
  #     - "16686:16686"   # Jaeger UI (Traces + Monitor)
  #     - "14268:14268"   # Collector HTTP (recebe spans OTLP/HTTP)
  #     - "6831:6831/udp" # Agent UDP
  #     - "6832:6832/udp"
  #     - "5775:5775/udp"
  #     - "5778:5778"
  #     - "14250:14250"   # gRPC (OTLP/gRPC)
  #     - "9411:9411"     # Zipkin endpoint
  #   environment:
  #     - COLLECTOR_ZIPKIN_HOST_PORT=:9411
  #   volumes:
  #     - ./jaeger-spm-config.yaml:/etc/jaeger/jaeger-spm-config.yaml:ro
  #   command:
  #     - "--config-file=/etc/jaeger/jaeger-spm-config.yaml"

  # prometheus:
  #   restart: always
  #   image: prom/prometheus:v2.45.0
  #   container_name: prometheus
  #   ports:
  #     - "9091:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

  # Outros servi√ßos comentados (caso deseje ativar futuramente):
  # gateway:
  #   build: ./gateway-graphql
  #   container_name: gateway-container
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     - event-service
  #     - user-service
  #     - notification-service

  # event-service:
  #   build: ./event-service-kotlin
  #   container_name: event-service-container
  #   ports:
  #     - "5001:5001"
  #   environment:
  #     - DB_URL=${DB_URL}

  # storage-service:
  #   restart: always
  #   build:
  #     context: ./storage_temp
  #     dockerfile: Dockerfile
  #   container_name: storage-service-container
  #   working_dir: /usr/src/app
  #   command: "npm start"
  #   expose:
  #     - "5011"
  #   ports:
  #     - "5011:5011"

  # notification-service:
  #   build: ./notification-service-nodejs
  #   container_name: notification-service-container
  #   ports:
  #     - "5003:5003"
  #   depends_on:
  #     - redis

  # mongodb-user-service-nodejs:
  #   image: mongo
  #   container_name: mongodb-container-user-service-nodejs
  #   ports:
  #     - "27018:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  # mongodb-event-service-kotlin:
  #   image: mongo
  #   container_name: mongodb-container-event-service-kotlin
  #   ports:
  #     - "27019:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  # mongodb-notification-service-nodejs:
  #   image: mongo
  #   container_name: mongodb-container-notification-service-nodejs
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  # mongodb-gateway-graphql:
  #   image: mongo
  #   container_name: mongodb-container-gateway-graphql
  #   ports:
  #     - "27016:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
  #     - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  # redis:
  #   image: redis
  #   container_name: redis-container
  #   ports:
  #     - "6379:6379"
